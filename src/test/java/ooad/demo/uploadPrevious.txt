    @PostMapping("/files/uploadDatabase")
    public void uploadDatabase(@RequestParam(value = "file") MultipartFile  file,
//                       @RequestParam(value = "database_index") Integer database_index,
                       @RequestParam(value = "database_name") String database_name,
                       @RequestParam(value = "database_description") String database_description,
                       HttpServletRequest request, HttpServletResponse response) throws Exception {

        response.setContentType("text/json;charset=utf-8");
        //获取用户的id
        Principal userPrincipal = request.getUserPrincipal();

        if (userPrincipal == null || file == null || database_name == null || file.isEmpty() ){
            //根据用户id查询有的文件信息
            JsonResult result = ResultTool.fail(ResultCode.USER_NOT_LOGIN);
            response.getWriter().write(JSON.toJSONString(result));
            return;
        }

        //获取文件原始名称
        String originalFilename = file.getOriginalFilename();
        //获取文件后缀
        String extension = "."+FilenameUtils.getExtension(file.getOriginalFilename());
        //生成新的文件名称
        String newFileName = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()) + UUID.randomUUID().toString().replace("-", "") + extension;
        //文件大小
        long size = file.getSize();
        //文件类型
        String type = file.getContentType();

        System.out.println(type);

        // TODO: 文件夹名: 学生不可访问
        String relative_path =  "/static/database/";
        String realPath = ResourceUtils.getURL("classpath:").getPath() + relative_path;

        File post_file = new File(realPath);
        if (!post_file.exists()) post_file.mkdirs();

        System.out.println(post_file);
        //处理文件上传
        file.transferTo(new File(post_file, newFileName));
        //将文件信息放入数据库中
        // TODO: 异常处理
        UserFile userFile = new UserFile();
        userFile.setOld_file_name(originalFilename)
                .setNew_file_name(newFileName)
                .setExt(extension)
                .setFile_size(String.valueOf(size))
                .setFile_type(type)
                .setUser_id(Integer.parseInt(userPrincipal.getName()))
                .setAssignment_id(-1)
                .setQuestion_id(-1)
                .setIs_database(true);
        userFile.setRelative_path(relative_path);

        System.out.println(userFile);

        // 保存文件相关信息到数据库
        // TODO: Copy file to Judge Server
        userFileService.save(userFile);
        int file_id = userFile.getId();
        String remoteFullPATH = remoteDatabasePath + newFileName;
        if (!remote.uploadFile(file_id, remoteFullPATH)){
            JsonResult<String> result = ResultTool.fail();
            response.getWriter().write(JSON.toJSONString(result));
            return;
        }
        Database database = new Database(file_id, database_name, database_description, remoteDatabasePath, remoteFullPATH);
        dataBaseMapper.addDatabase(database);
        // 返回成功 上传数据库
        String retrieve_url = realPath + newFileName;
        JsonResult<String> result = ResultTool.success();
        result.setData(retrieve_url);
        response.getWriter().write(JSON.toJSONString(result));
    }


    /***
     * return a file_id stored in database
     * @param file
     * @param request
     * @param response
     * @throws Exception
     */
//    @PostMapping("/files/uploadToRemote")
    public void uploadToRemoteOld(@RequestParam(value = "file") MultipartFile  file,
                               HttpServletRequest request, HttpServletResponse response) throws Exception {

        response.setContentType("text/json;charset=utf-8");
        //获取用户的id
        Principal userPrincipal = request.getUserPrincipal();

        if (userPrincipal == null || file == null || file.isEmpty() ){
            //根据用户id查询有的文件信息
            JsonResult result = ResultTool.fail(ResultCode.USER_NOT_LOGIN);
            response.getWriter().write(JSON.toJSONString(result));
            return;
        }

        //获取文件原始名称
        String originalFilename = file.getOriginalFilename();
        //获取文件后缀
        String extension = "."+FilenameUtils.getExtension(file.getOriginalFilename());
        //生成新的文件名称
        String newFileName = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()) + UUID.randomUUID().toString().replace("-", "") + extension;
        //文件大小
        long size = file.getSize();
        //文件类型
        String type = file.getContentType();

        System.out.println(type);

        // TODO: 文件夹名: 学生不可访问
        String relative_path =  "/static/database/";
        String realPath = ResourceUtils.getURL("classpath:").getPath() + relative_path;

        File post_file = new File(realPath);
        if (!post_file.exists()) post_file.mkdirs();

        System.out.println(post_file);
        //处理文件上传
        file.transferTo(new File(post_file, newFileName));
        //将文件信息放入数据库中
        // TODO: 异常处理
        UserFile userFile = new UserFile();
        userFile.setOld_file_name(originalFilename)
                .setNew_file_name(newFileName)
                .setExt(extension)
                .setFile_size(String.valueOf(size))
                .setFile_type(type)
                .setUser_id(Integer.parseInt(userPrincipal.getName()))
                .setAssignment_id(-1)
                .setQuestion_id(-1)
                .setIs_database(true);
        userFile.setRelative_path(relative_path);

        System.out.println(userFile);
        String remoteFullPATH = remoteDatabasePath + newFileName;

        // 保存文件相关信息到数据库
        // TODO: Copy file to Judge Server
        userFileService.save(userFile);
        int file_id = userFile.getId();
        if (!remote.uploadFile(file_id, remoteFullPATH)){
            JsonResult<String> result = ResultTool.fail();
            result.setData("upload to remote server failed!");
            response.getWriter().write(JSON.toJSONString(result));
            return;
        }
        // 返回成功 上传数据库
        JsonResult<String> result = ResultTool.success();
        result.setData(String.valueOf(file_id));
        response.getWriter().write(JSON.toJSONString(result));
    }